package unicode.tr29.internal.generate;

using StringTools;
using Lambda;

class BoundaryPropertyValuesGen {
    static function getValues(contents:String) {
        function parseLine(l:String) {
            var ls = l.split(';');

            var left = ls[0].split('..');

            function ofHex(s:String) return Std.parseInt('0x' + s.trim());
            var s = switch(left) {
            case [a, b]: Range(ofHex(a), ofHex(b));
            case [a]   : Code(ofHex(a));
            case _    : throw 'failed to parse';
            }

            return { match: s, value: ls[1].trim() };
        }

        return contents.replace('\r','\n')
                       .split("\n")
                       .map(function(l) return l.split("#")[0].trim())
                       .filter(function(l) return l != '')
                       .map(parseLine);
    }

    public static function generateExtern(file:String, pack:Array<String>, name:String) {
        var contents = sys.io.File.getContent(file);

        var values = getValues(contents);

        var vm = new Map();
        vm.set('Other', 'Other');
        for (v in values) vm.set(v.value, v.value);

        var code = new StringBuf();
        function l(s:String) code.add('$s\n');
        l('package ${pack.join('.')};');
        l('//Autogenerated, do not edit');

        l('class ${name} {');

        var dict = 

        l('        static var m = [');
        var first = true;
        for (v in values) {
            var cond = switch(v.match) {
            case Code(n)   : l('        $n => ${v.value},');
            case _:
            }
        }
        l('        ];');
        
        l('    public static function get(code:Int):${name}Enum {');
        for (v in values) {
            var cond = switch(v.match) {
            case Range(a,b): l('        if (code >= $a && code <= $b) return ${v.value};');
            case _:
            }
        }
        l('        return m.exists(code) ? m.get(code) : Other;');
        l('    }');
        l('}');

        l('enum ${name}Enum {');
        for (v in vm) {
            l('    ${v};');
        }
        l('}');

        sys.io.File.saveContent('./src/${pack.concat([name]).join("/")}.hx', code.toString());
    }
}

enum S { Code (n:Int);
         Range(l:Int, h:Int);
       }